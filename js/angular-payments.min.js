angular.module("angularPayments", []).value("angularPaymentsOptions", { enabledCardTypes: ["mastercard", "visa", "amex", "dinersclub", "discover", "jcb", "maestro", "unionpay"] }); angular.module("angularPayments").factory("Common", [function () { var e = {}; e["parseExpiry"] = function (e) { var t, n, r, i; e = e || ""; e = e.replace(/\s/g, ""); i = e.split("/", 2), t = i[0], r = i[1]; if ((r != null ? r.length : void 0) === 2 && /^\d+$/.test(r)) { n = (new Date).getFullYear(); n = n.toString().slice(0, 2); r = n + r } t = parseInt(t, 10); r = parseInt(r, 10); return { month: t, year: r} }; return e } ]); angular.module("angularPayments").factory("Cards", ["angularPaymentsOptions", "$filter", function (e, t) { var n = /(\d{1,4})/g; var r = /(?:^|\s)(\d{4})$/; var i = [{ type: "maestro", pattern: /^(5018|5020|5038|6304|6759|676[1-3])/, format: n, inputFormat: r, length: [12, 13, 14, 15, 16, 17, 18, 19], cvcLength: [3], luhn: true }, { type: "dinersclub", pattern: /^(36|38|30[0-5])/, format: n, inputFormat: r, length: [14], cvcLength: [3], luhn: true }, { type: "laser", pattern: /^(6706|6771|6709)/, format: n, inputFormat: r, length: [16, 17, 18, 19], cvcLength: [3], luhn: true }, { type: "jcb", pattern: /^35/, format: n, inputFormat: r, length: [16], cvcLength: [3], luhn: true }, { type: "unionpay", pattern: /^62/, format: n, inputFormat: r, length: [16, 17, 18, 19], cvcLength: [3], luhn: false }, { type: "discover", pattern: /^(6011|65|64[4-9]|622)/, format: n, inputFormat: r, length: [16], cvcLength: [3], luhn: true }, { type: "mastercard", pattern: /^5[1-5]/, format: n, inputFormat: r, length: [16], cvcLength: [3], luhn: true }, { type: "amex", pattern: /^3[47]/, format: /(\d{1,4})(\d{1,6})?(\d{1,5})?/, inputFormat: /^(\d{4}|\d{4}\s\d{6})$/, length: [15], cvcLength: [3, 4], luhn: true }, { type: "visa", pattern: /^4/, format: n, inputFormat: r, length: [13, 14, 15, 16], cvcLength: [3], luhn: true}]; var s = t("filter")(i, function (t) { return e.enabledCardTypes.indexOf(t.type) > -1 }); var o = function (e) { var t, n, r; e = (e + "").replace(/\D/g, ""); for (n = 0, r = s.length; n < r; n++) { t = s[n]; if (t.pattern.test(e)) { return t } } }; var u = function (e) { var t, n, r; for (n = 0, r = s.length; n < r; n++) { t = s[n]; if (t.type === e) { return t } } }; return { fromNumber: function (e) { return o(e) }, fromType: function (e) { return u(e) }, defaultFormat: function () { return n }, defaultInputFormat: function () { return r } } } ]); angular.module("angularPayments").factory("_Format", ["Cards", "Common", "$filter", function (e, t, n) { var r = {}; var i = function (e) { var t; if (e.prop("selectionStart") != null && e.prop("selectionStart") !== e.prop("selectionEnd")) { return true } if (typeof document !== "undefined" && document !== null ? (t = document.selection) != null ? typeof t.createRange === "function" ? t.createRange().text : void 0 : void 0 : void 0) { return true } return false }; var s = function (t) { var n, r, i, s, o, u, a; i = String.fromCharCode(t.which); n = angular.element(t.currentTarget); a = n.val(); r = e.fromNumber(a + i); s = (a.replace(/\D/g, "") + i).length; u = 16; if (r) { u = r.length[r.length.length - 1] } if (s >= u) { return } if (!/^\d+$/.test(i) && !t.meta && t.keyCode >= 46) { t.preventDefault(); return } if (n.prop("selectionStart") != null && n.prop("selectionStart") !== a.length) { return } o = e.defaultInputFormat(); if (r) { o = r.inputFormat } if (o.test(a)) { t.preventDefault(); return n.val(a + " " + i) } else if (o.test(a + i)) { t.preventDefault(); return n.val(a + i + " ") } }; var o = function (t) { var n, r, s, o; n = angular.element(t.currentTarget); s = String.fromCharCode(t.which); if (!/^\d+$/.test(s)) { t.preventDefault(); return } if (i(n)) { return } o = (n.val() + s).replace(/\D/g, ""); r = e.fromNumber(o); if (r) { if (!(o.length <= r.length[r.length.length - 1])) { t.preventDefault() } } else { if (!(o.length <= 16)) { t.preventDefault() } } }; var u = function (e) { var t, n; t = angular.element(e.currentTarget); n = t.val(); if (e.meta) { return } if (e.which !== 8) { return } if (t.prop("selectionStart") != null && t.prop("selectionStart") !== n.length) { return } if (/\d\s$/.test(n) && !e.meta && e.keyCode >= 46) { e.preventDefault(); return t.val(n.replace(/\d\s$/, "")) } else if (/\s\d?$/.test(n)) { e.preventDefault(); return t.val(n.replace(/\s\d?$/, "")) } }; var a = function (t) { var n, r, i, s; n = e.fromNumber(t); if (!n) { return t } i = n.length[n.length.length - 1]; t = t.replace(/\D/g, ""); t = t.slice(0, +i + 1 || 9e9); if (n.format.global) { return (s = t.match(n.format)) != null ? s.join(" ") : void 0 } else { r = n.format.exec(t); if (r != null) { r.shift() } return r != null ? r.join(" ") : void 0 } }; var f = function (e) { return setTimeout(function () { var t, n; t = angular.element(e.target); n = t.val(); n = a(n); return t.val(n) }) }; var l = function (e) { return e != null ? e.replace(/\s/g, "") : e }; r["card"] = function (e, t) { e.bind("keypress", o); e.bind("keypress", s); e.bind("keydown", u); e.bind("paste", f); t.$parsers.push(l); t.$formatters.push(a) }; _formatCVC = function (e) { $target = angular.element(e.currentTarget); digit = String.fromCharCode(e.which); if (!/^\d+$/.test(digit) && !e.meta && e.keyCode >= 46) { e.preventDefault(); return } val = $target.val() + digit; if (val.length <= 4) { return } else { e.preventDefault(); return } }; r["cvc"] = function (e) { e.bind("keypress", _formatCVC) }; _restrictExpiry = function (e) { var t, n, r; t = angular.element(e.currentTarget); n = String.fromCharCode(e.which); if (!/^\d+$/.test(n) && !e.meta && e.keyCode >= 46) { e.preventDefault(); return } if (i(t)) { return } r = t.val() + n; r = r.replace(/\D/g, ""); if (r.length > 6) { e.preventDefault(); return } }; _formatExpiry = function (e) { var t, n, r; n = String.fromCharCode(e.which); if (!/^\d+$/.test(n) && !e.meta && e.keyCode >= 46) { e.preventDefault(); return } t = angular.element(e.currentTarget); r = t.val() + n; if (/^\d$/.test(r) && r !== "0" && r !== "1") { e.preventDefault(); return t.val("0" + r + " / ") } else if (/^\d\d$/.test(r)) { e.preventDefault(); return t.val("" + r + " / ") } }; _formatForwardExpiry = function (e) { var t, n, r; n = String.fromCharCode(e.which); if (!/^\d+$/.test(n) && !e.meta && e.keyCode >= 46) { return } t = angular.element(e.currentTarget); r = t.val(); if (/^\d\d$/.test(r)) { return t.val("" + r + " / ") } }; _formatForwardSlash = function (e) { var t, n, r; n = String.fromCharCode(e.which); if (n !== "/") { return } t = angular.element(e.currentTarget); r = t.val(); if (/^\d$/.test(r) && r !== "0") { return t.val("0" + r + " / ") } }; _formatBackExpiry = function (e) { var t, n; if (e.meta) { return } t = angular.element(e.currentTarget); n = t.val(); if (e.which !== 8) { return } if (t.prop("selectionStart") != null && t.prop("selectionStart") !== n.length) { return } if (/\d(\s|\/)+$/.test(n)) { e.preventDefault(); return t.val(n.replace(/\d(\s|\/)*$/, "")) } else if (/\s\/\s?\d?$/.test(n)) { e.preventDefault(); return t.val(n.replace(/\s\/\s?\d?$/, "")) } }; var c = function (e) { if (e != null && e != "") { var r = t.parseExpiry(e); var i = new Date(r.year, r.month - 1); return n("date")(i, "MM/yyyy") } return null }; var h = function (e) { if (e != null && e != "") { var r = t.parseExpiry(e); var i = new Date(r.year, r.month - 1); return n("date")(i, "MM / yyyy") } return null }; r["expiry"] = function (e, t) { e.bind("keypress", _restrictExpiry); e.bind("keypress", _formatExpiry); e.bind("keypress", _formatForwardSlash); e.bind("keypress", _formatForwardExpiry); e.bind("keydown", _formatBackExpiry); t.$parsers.push(c); t.$formatters.push(h) }; return function (e, t, n) { if (!r[e]) { types = Object.keys(r); errstr = 'Unknown type for formatting: "' + e + '". '; errstr += 'Should be one of: "' + types.join('", "') + '"'; throw errstr } return r[e](t, n) } } ]).directive("paymentsFormat", ["$window", "_Format", function (e, t) { return { restrict: "A", require: "ngModel", link: function (e, n, r, i) { t(r.paymentsFormat, n, i) } } } ]); angular.module("angularPayments").factory("_Validate", ["Cards", "Common", "$parse", function (e, t, n) { var r = [].indexOf || function (e) { for (var t = 0, n = this.length; t < n; t++) { if (t in this && this[t] === e) return t } return -1 }; var i = function (e) { var t, n, r, i, s, o; r = true; i = 0; n = (e + "").split("").reverse(); for (s = 0, o = n.length; s < o; s++) { t = n[s]; t = parseInt(t, 10); if (r = !r) { t *= 2 } if (t > 9) { t -= 9 } i += t } return i % 10 === 0 }; var s = {}; s["cvc"] = function (t, i, s, o) { var u, a; if (t == null || t.length == 0) return true; if (!/^\d+$/.test(t)) { return false } var f; if (o.paymentsTypeModel) { var l = n(o.paymentsTypeModel); f = l(s) } if (f) { return u = t.length, r.call((a = e.fromType(f)) != null ? a.cvcLength : void 0, u) >= 0 } else { return t.length >= 3 && t.length <= 4 } }; s["card"] = function (t, s, o, u) { var a, f, l; if (u.paymentsTypeModel) { l = n(u.paymentsTypeModel) } var c = function () { if (l) { l.assign(o, null) } s.$card = null }; if (t == null || t.length == 0) { c(); return true } t = (t + "").replace(/\s+|-/g, ""); if (!/^\d+$/.test(t)) { c(); return false } a = e.fromNumber(t); if (!a) { c(); return false } s.$card = angular.copy(a); if (l) { l.assign(o, a.type) } ret = (f = t.length, r.call(a.length, f) >= 0) && (a.luhn === false || i(t)); return ret }; s["expiry"] = function (e) { if (e == null || e.length == 0) return true; obj = t.parseExpiry(e); month = obj.month; year = obj.year; var n, r, i; if (!(month && year)) { return false } if (!/^\d+$/.test(month)) { return false } if (!/^\d+$/.test(year)) { return false } if (!(parseInt(month, 10) <= 12)) { return false } if (year.length === 2) { i = (new Date).getFullYear(); i = i.toString().slice(0, 2); year = i + year } r = new Date(year, month); n = new Date; r.setMonth(r.getMonth() - 1); r.setMonth(r.getMonth() + 1, 1); return r > n }; return function (e, t, n, r, i) { if (!s[e]) { types = Object.keys(s); errstr = 'Unknown type for validation: "' + e + '". '; errstr += 'Should be one of: "' + types.join('", "') + '"'; throw errstr } return s[e](t, n, r, i) } } ]).factory("_ValidateWatch", ["_Validate", function (e) { var t = {}; t["cvc"] = function (t, n, r, i) { if (i.paymentsTypeModel) { r.$watch(i.paymentsTypeModel, function (s, o) { if (s != o) { var u = e(t, n.$modelValue, n, r, i); n.$setValidity(t, u) } }) } }; return function (e, n, r, i) { if (t[e]) { return t[e](e, n, r, i) } } } ]).directive("paymentsValidate", ["$window", "_Validate", "_ValidateWatch", function (e, t, n) { return { restrict: "A", require: "ngModel", link: function (e, r, i, s) { var o = i.paymentsValidate; n(o, s, e, i); var u = function (n) { var r = t(o, n, s, e, i); s.$setValidity(o, r); return r ? n : undefined }; s.$formatters.push(u); s.$parsers.push(u) } } } ]); angular.module("angularPayments").directive("stripeForm", ["$window", "$parse", "Common", function (e, t, n) { _getDataToSend = function (e) { var t = ["number", "expMonth", "expYear", "cvc", "name", "addressLine1", "addressLine2", "addressCity", "addressState", "addressZip", "addressCountry"]; var n = function (e) { return e.replace(/([A-Z])/g, function (e) { return "_" + e.toLowerCase() }) }; var r = {}; for (i in t) { if (t.hasOwnProperty(i)) { r[n(t[i])] = angular.copy(e[t[i]]) } } r["number"] = (r["number"] || "").replace(/ /g, ""); return r }; return { restrict: "A", link: function (t, r, i) { if (!e.Stripe) { throw "stripeForm requires that you have stripe.js installed. Include https://js.stripe.com/v2/ into your html." } var s = angular.element(r); s.bind("submit", function () { expMonthUsed = t.expMonth ? true : false; expYearUsed = t.expYear ? true : false; if (!(expMonthUsed && expYearUsed)) { exp = n.parseExpiry(t.expiry); t.expMonth = exp.month; t.expYear = exp.year } var r = s.find("button"); r.prop("disabled", true); if (s.hasClass("ng-valid")) { e.Stripe.createToken(_getDataToSend(t), function () { var e = arguments; t.$apply(function () { t[i.stripeForm].apply(t, e) }); r.prop("disabled", false) }) } else { t.$apply(function () { t[i.stripeForm].apply(t, [400, { error: "Invalid form submitted."}]) }); r.prop("disabled", false) } t.expMonth = null; t.expYear = null }) } } } ])